# AWS Lambda handler for the Flask app\nimport json\nimport os\nfrom werkzeug.serving import WSGIRequestHandler\nfrom backend.app import app\n\ndef lambda_handler(event, context):\n    \"\"\"AWS Lambda handler function\"\"\"\n    try:\n        # Handle different types of Lambda events\n        if 'httpMethod' in event:\n            # API Gateway event\n            from werkzeug.wrappers import Request, Response\n            from werkzeug.urls import url_encode\n            \n            # Convert API Gateway event to WSGI environment\n            environ = {\n                'REQUEST_METHOD': event['httpMethod'],\n                'PATH_INFO': event['path'],\n                'QUERY_STRING': url_encode(event.get('queryStringParameters') or {}),\n                'CONTENT_TYPE': event.get('headers', {}).get('content-type', ''),\n                'CONTENT_LENGTH': str(len(event.get('body') or '')),\n                'SERVER_NAME': event.get('headers', {}).get('host', 'localhost'),\n                'SERVER_PORT': '80',\n                'wsgi.version': (1, 0),\n                'wsgi.url_scheme': 'https',\n                'wsgi.input': event.get('body') or '',\n                'wsgi.errors': None,\n                'wsgi.multithread': False,\n                'wsgi.multiprocess': True,\n                'wsgi.run_once': False,\n            }\n            \n            # Add headers to environ\n            for key, value in event.get('headers', {}).items():\n                key = 'HTTP_' + key.upper().replace('-', '_')\n                environ[key] = value\n            \n            # Call Flask app\n            response = Response.from_app(app, environ)\n            \n            return {\n                'statusCode': response.status_code,\n                'headers': dict(response.headers),\n                'body': response.get_data(as_text=True)\n            }\n    \n    except Exception as e:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': str(e)})\n        }\n